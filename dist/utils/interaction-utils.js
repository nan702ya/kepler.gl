"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefaultInteraction = getDefaultInteraction;
exports.findFieldsToShow = findFieldsToShow;
exports.getTooltipDisplayDeltaValue = getTooltipDisplayDeltaValue;
exports.getTooltipDisplayValue = getTooltipDisplayValue;
exports.BRUSH_CONFIG = exports.TOOLTIP_MINUS_SIGN = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _defaultSettings = require("../constants/default-settings");

var _dataUtils = require("./data-utils");

var _icons = require("../components/common/icons");

var _tooltip = require("../constants/tooltip");

// Copyright (c) 2021 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// \u2212 is the minus sign that d3-format uses for decimal number formatting
var TOOLTIP_MINUS_SIGN = "\u2212";
/**
 * @type {typeof import('./interaction-utils').getDefaultInteraction}
 */

exports.TOOLTIP_MINUS_SIGN = TOOLTIP_MINUS_SIGN;

function getDefaultInteraction() {
  return {
    tooltip: {
      id: 'tooltip',
      label: 'interactions.tooltip',
      enabled: true,
      iconComponent: _icons.Messages,
      config: {
        fieldsToShow: {},
        compareMode: false,
        compareType: _tooltip.COMPARE_TYPES.ABSOLUTE
      }
    },
    geocoder: {
      id: 'geocoder',
      label: 'interactions.geocoder',
      enabled: false,
      iconComponent: _icons.Pin,
      position: null
    },
    brush: {
      id: 'brush',
      label: 'interactions.brush',
      enabled: false,
      iconComponent: _icons.Crosshairs,
      config: {
        // size is in km
        size: 0.5
      }
    },
    coordinate: {
      id: 'coordinate',
      label: 'interactions.coordinate',
      enabled: false,
      iconComponent: _icons.CursorClick,
      position: null
    }
  };
}

var BRUSH_CONFIG = {
  range: [0, 50]
};
/**
 * @type {typeof import('./interaction-utils').findFieldsToShow}
 */

exports.BRUSH_CONFIG = BRUSH_CONFIG;

function findFieldsToShow(_ref) {
  var fields = _ref.fields,
      id = _ref.id;

  // first find default tooltip fields for trips
  var fieldsToShow = _defaultSettings.DEFAULT_TOOLTIP_FIELDS.reduce(function (prev, curr) {
    if (fields.find(function (_ref2) {
      var name = _ref2.name;
      return curr.name === name;
    })) {
      prev.push(curr);
    }

    return prev;
  }, []);

  return (0, _defineProperty2["default"])({}, id, fieldsToShow.length ? fieldsToShow : autoFindTooltipFields(fields));
}

function autoFindTooltipFields(fields) {
  var ptFields = _mergeFieldPairs(_defaultSettings.TRIP_POINT_FIELDS); // filter out the default fields that contains lat and lng and any geometry


  var fieldsToShow = fields.filter(function (_ref4) {
    var name = _ref4.name,
        type = _ref4.type;
    return name.replace(/[_,.]+/g, ' ').trim().split(' ').every(function (seg) {
      return !ptFields.includes(seg);
    }) && type !== _defaultSettings.ALL_FIELD_TYPES.geojson && type !== 'object';
  });
  return fieldsToShow.slice(0, _defaultSettings.MAX_DEFAULT_TOOLTIPS).map(function (_ref5) {
    var name = _ref5.name;
    return {
      name: name,
      format: null
    };
  });
}

function _mergeFieldPairs(pairs) {
  return pairs.reduce(function (prev, pair) {
    return [].concat((0, _toConsumableArray2["default"])(prev), (0, _toConsumableArray2["default"])(pair));
  }, []);
}
/**
 * @type {typeof import('./interaction-utils').getTooltipDisplayDeltaValue}
 */


function getTooltipDisplayDeltaValue(_ref6) {
  var primaryData = _ref6.primaryData,
      field = _ref6.field,
      compareType = _ref6.compareType,
      data = _ref6.data,
      fieldIdx = _ref6.fieldIdx,
      item = _ref6.item;
  var displayDeltaValue = null;

  if (primaryData && ( // comparison mode only works for numeric field
  field.type === _defaultSettings.ALL_FIELD_TYPES.integer || field.type === _defaultSettings.ALL_FIELD_TYPES.real)) {
    var baseDp = primaryData.valueAt(fieldIdx);
    var dp = data.valueAt(fieldIdx);

    if ((0, _dataUtils.isNumber)(baseDp) && (0, _dataUtils.isNumber)(dp)) {
      var deltaValue = compareType === _tooltip.COMPARE_TYPES.RELATIVE ? dp / baseDp - 1 : dp - baseDp;
      var deltaFormat = compareType === _tooltip.COMPARE_TYPES.RELATIVE ? _tooltip.TOOLTIP_FORMATS.DECIMAL_PERCENT_FULL_2[_tooltip.TOOLTIP_KEY] : item.format || _tooltip.TOOLTIP_FORMATS.DECIMAL_DECIMAL_FIXED_3[_tooltip.TOOLTIP_KEY];
      displayDeltaValue = (0, _dataUtils.getFormatter)(deltaFormat)(deltaValue); // safely cast string

      displayDeltaValue = (0, _dataUtils.defaultFormatter)(displayDeltaValue);
      var deltaFirstChar = displayDeltaValue.charAt(0);

      if (deltaFirstChar !== '+' && deltaFirstChar !== TOOLTIP_MINUS_SIGN) {
        displayDeltaValue = "+".concat(displayDeltaValue);
      }
    } else {
      displayDeltaValue = TOOLTIP_MINUS_SIGN;
    }
  }

  return displayDeltaValue;
}
/**
 * @type {typeof import('./interaction-utils').getTooltipDisplayValue}
 */


function getTooltipDisplayValue(_ref7) {
  var item = _ref7.item,
      field = _ref7.field,
      data = _ref7.data,
      fieldIdx = _ref7.fieldIdx;
  var dataValue = data.valueAt(fieldIdx);

  if (!(0, _dataUtils.notNullorUndefined)(dataValue)) {
    return '';
  }

  if (item.format) {
    return Array.isArray(dataValue) ? dataValue.map(function (i) {
      return (0, _dataUtils.getFormatter)(item.format, field)(i);
    }).join('\t') : (0, _dataUtils.getFormatter)(item.format, field)(dataValue);
  } else {
    return Array.isArray(dataValue) ? dataValue.map(function (i) {
      return (0, _dataUtils.parseFieldValue)(i, field.type);
    }).join('\t') : (0, _dataUtils.parseFieldValue)(dataValue, field.type);
  } // return item.format
  //   ? getFormatter(item.format, field)(dataValue)
  //   : parseFieldValue(dataValue, field.type);

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,